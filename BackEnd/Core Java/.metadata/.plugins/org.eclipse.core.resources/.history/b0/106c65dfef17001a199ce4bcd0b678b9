package com.capgemini.datastructure.algorithm;

import java.time.Duration;
import java.time.Instant;

public class AlgorithmAnalysis {

	public static void main(String[] args) {
//		long number = 99999999L;
//		System.out.println(addUpto(number));
//		System.out.println(addUptoQuick(number));
		countingDurartion2();
		countingDurartion1();

	}

	public static long addUpto(Long number) {

		long total = 0L;

		for (long i = 0; i <= number; i++) {
			total = i + total;
		}

		return total;
	}

	public static long addUptoQuick(Long number) {

		return number * (number + 1) / 2;
	}

	public static void countingDurartion1() {

		long number = 99999999L;
		Instant start = Instant.now();
		System.out.println("addUpto : " + addUpto(number));
		Instant end = Instant.now();
		long duration = Duration.between(start, end).toMillis();
		double seconds = duration / 1000.0;
		System.out.println("addUpto time : " + seconds +" seconds");

	}

	public static void countingDurartion2() {

		long number = 9999999L;
		Instant start = Instant.now();
		System.out.println("addUpto : " + addUptoQuick(number));
		Instant end = Instant.now();
		long duration = Duration.between(start, end).toMillis();
		double seconds = duration / 1000.0;
		System.out.println("addUptoQuick time : " + seconds +" seconds");

	}
}
